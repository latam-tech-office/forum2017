- name: Check if Ansible Tower license file exists
  stat: path=./{{ ansibletower_license_file }}
  register: ansibletower_license_exists
  tags:
     - testlicense
     - tower
     - check  
     - reconfigtower

- name: Does the Ansible Tower license exists ?
  fail: msg="Ansible Tower License file{{ ':' }} {{ ansibletower_license_file }} wasn't found" 
  when: ansibletower_license_exists.stat.exists == False
  tags:
     - testlicense
     - tower
     - reconfigtower
         
- name: Login as admin within OpenShift Environment
  command: oc login --username=system:admin
  tags:
     - create
     - tower
         
- name: Delete any previously existing serviceaccounts
  command: oc delete serviceaccount/satower --namespace {{ ansibletower_namespace }}
  ignore_errors: True
  tags:
     - create
     - cleanup
     - tower
         
- name: Delete any previously existing namespaces 
  command: oc delete project {{ ansibletower_namespace }}
  ignore_errors: True
  tags: 
     - create
     - cleanup
     - tower
         
- name: Create a Project{{ ':' }} {{ ansibletower_namespace }} 
  command: oadm new-project {{ ansibletower_namespace }} --display-name="Ansible Tower{{ ':' }} LATAM Red Hat Forum 2017" --admin={{ username }}
  register: create_namespace
  until: create_namespace.rc == 0
  retries: 10
  delay: 10
  tags: 
     - create
     - tower
         
- name: Create a Service Account to relax security permissions
  command: oc create serviceaccount satower --namespace {{ ansibletower_namespace }}
  tags: 
     - create
     - tower
            
- name: Allow this pod to run in a relax Security Context
  command: oadm policy add-scc-to-user anyuid --serviceaccount satower --namespace {{ ansibletower_namespace }}
  tags: 
     - create
     - tower
         
- name: Allow this pod to run in a Privileged Security Context
  command: oadm policy add-scc-to-user privileged system:serviceaccount:{{ ansibletower_namespace }}:satower
  tags: 
     - create
     - tower

- name: Create the application based on a Docker Image {{ ansibletower_dockerimage }}
  command: oc new-app --name=tower --docker-image={{ ansibletower_dockerimage }} --namespace {{ ansibletower_namespace }}
  tags: 
     - create
     - tower
         
- name: Create the service for this container on port 443 (In case of Robert's Docker Image)
  command: oc expose deploymentconfig/tower --port=443 --port=8080 --port=80 --namespace {{ ansibletower_namespace }}
  ignore_errors: Yes
  tags: 
     - create
     - tower

- name: Add a port 80 to DeploymentConfig so it allows the Pod to communicate with this port
  command: oc patch deploymentconfig/tower --patch '{"spec"{{ ':' }} {"template"{{ ':' }} {"spec"{{ ':' }} {"containers"{{ ':' }} [{"name"{{ ':' }} "tower","ports"{{ ':' }} [{"containerPort"{{ ':' }} 80, "protocol"{{ ':' }} "TCP"}]}]}}}}' --namespace {{ ansibletower_namespace }}
  tags:
     - create
     - tower

- name: Create the service for this container on port 80 for better integration with CloudForms, named "{{ ansibletower_web_service }}"
  command: oc expose deploymentconfig/tower --port=80 --name={{ ansibletower_web_service }} --namespace {{ ansibletower_namespace }}
  ignore_errors: Yes
  tags:
     - create
     - tower
         
- name: Patch the DeploymentConfig to allow Privileged Containers
  command: oc patch deploymentconfig/tower --patch '{"spec"{{ ':' }}{"template"{{ ':' }}{"spec"{{ ':' }} {"containers"{{ ':' }} [{"name"{{ ':' }}"tower","securityContext"{{ ':' }} {"privileged"{{ ':' }} true}} ],"serviceAccountName"{{ ':' }}"satower"}}}}' --namespace {{ ansibletower_namespace }}
  tags: 
     - create
     - tower
         
- name: Patch the DeploymentConfig to avoid always download the image
  command: oc patch deploymentconfig/tower --patch '{"spec"{{ ':' }}{"template"{{ ':' }}{"spec"{{ ':' }} {"containers"{{ ':' }} [{"name"{{ ':' }}"tower", "imagePullPolicy"{{ ':' }}"IfNotPresent"}]}}}}' --namespace {{ ansibletower_namespace }}
  tags: 
     - create
     - tower
         
- name: Create a friendly route tower.{{ openshift_cloudapps_domain }}
  command: oc expose service/tower --hostname=tower.{{ openshift_cloudapps_domain }} --namespace {{ ansibletower_namespace }} --port=443
  tags: 
     - create
     - tower
         
- name: Create a Patch to Router, so it allowed TLS Passthrough
  command: oc patch route/tower --patch='{"spec"{{ ':' }}{"tls"{{ ':' }}{"termination"{{ ':' }} "passthrough"}}}' --namespace {{ ansibletower_namespace }}
  tags: 
     - create
     - tower
         
- name: Fetch Ansible Tower port
  command: oc get service/tower --output jsonpath='{..spec.ports[?(@.name=="443-tcp")].port}' --namespace {{ ansibletower_namespace }}
  register: ansible_tower_port
  when: '{{ "rcalvaga" not in ansibletower_dockerimage }}'
  failed_when: ansible_tower_port.rc != 0
  tags:
     - tower
     - configtower
     - reconfigtower
         
- set_fact: tower_port={{ ansible_tower_port.stdout }}
  when: '{{ "rcalvaga" not in ansibletower_dockerimage }}'
  tags:
     - tower
     - configtower
     - reconfigtower
         
- name: Fetch Ansible Tower port (Robert's Docker Image)
  command: oc get service/tower --output jsonpath='{..spec.ports.*.port}' --namespace {{ ansibletower_namespace }}
  register: ansible_tower_port
  when: '{{ "rcalvaga" in ansibletower_dockerimage }}'
  failed_when: ansible_tower_port.rc != 0
  tags:
     - tower
     - configtower
     - reconfigtower
         
- set_fact: tower_port={{ ansible_tower_port.stdout }}
  when: '{{ "rcalvaga" in ansibletower_dockerimage }}'
  tags:
     - tower
     - configtower
     - reconfigtower
         
- name: Define Ansible Tower URL
  set_fact: ansible_tower_url='https://tower.{{ ansibletower_namespace }}.svc.cluster.local:{{ tower_port }}'
  tags: 
     - tower
     - configtower
     - reconfigtower
         
- name: Wait for Ansible Tower to be up{{ ':' }} {{ ansible_tower_url }}
  uri: url="{{ ansible_tower_url }}" validate_certs=no status_code=200 
  register: tower_wait
  until: tower_wait.status == 200
  retries: 60
  delay: 10
  tags: 
     - tower
     - configtower
     - reconfigtower
         
- set_fact: license_content={{ lookup('file', '{{ ansibletower_license_file }}') }}
  tags:
     - tower
     - reconfigtower
         
- name: Adding a EULA into the License file
  lineinfile: dest=./{{ ansibletower_license_file }} regexp="{" line="{\n    \"eula_accepted\"{{ ':' }} true,"
  when: '{{ "eula_accepted" not in license_content }}'
  tags: 
     - tower
     - reconfigtower

- name: Apply the license file into Ansible Tower
  uri: method=POST body_format=json url="{{ ansible_tower_url }}/api/v1/config/"   status_code=200
       HEADER_Content-type="application/json" HEADER_Accept="application/json"
       user={{ ansibletower_username }} password={{ ansibletower_password }} force_basic_auth=yes validate_certs=no return_content=yes
       body="{{ lookup('file', '{{ ansibletower_license_file }}') }}"
  tags: 
     - tower
     - reconfigtower

- name: Adding {{ username }} to Ansible Tower
  uri:  
    method: POST  
    status_code: 201  
    body_format: json   
    url: "{{ ansible_tower_url }}/api/v1/users/"
    HEADER_Content-type: "application/json" 
    HEADER_Accept: "application/json"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}" 
    force_basic_auth: yes 
    validate_certs: no 
    return_content: yes
    body: '{"username": "{{ username }}","first_name": "Demo","last_name": "Demo","email": "{{ username }}@{{ openshift_domain }}","is_superuser": true,"is_system_auditor": false,"password": "{{ password }}"}'
  ignore_errors: True
  tags: 
     - tower
     - configtower
     - createuserstower
     - reconfigtower

- name: Adding forumuser to Ansible Tower
  uri:  
    method: POST  
    status_code: 201  
    body_format: json   
    url: "{{ ansible_tower_url }}/api/v1/users/"
    HEADER_Content-type: "application/json" 
    HEADER_Accept: "application/json"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}" 
    force_basic_auth: yes 
    validate_certs: no 
    return_content: yes
    body: '{"username": "forumuser","first_name": "Forum","last_name": "User","email": "forumuser@{{ openshift_domain }}","is_superuser": false,"is_system_auditor": false,"password": "{{ password }}"}'
  ignore_errors: True
  tags: 
     - tower
     - configtower
     - createuserstower
     - reconfigtower

- name: Adding forumadmin to Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/users/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"username": "forumadmin","first_name": "Forum","last_name": "Admin","email": "forumadmin@{{ openshift_domain }}","is_superuser": true,"is_system_auditor": false,"password": "{{ password }}"}'
    status_code: 201
  ignore_errors: True
  tags:
      - tower
      - configtower
      - createuserstower
      - reconfigtower

- name: Adding forumauditor to Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/users/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    status_code: 201
    body: '{"username": "forumauditor","first_name": "Forum","last_name": "Auditor","email": "forumauditor@{{ openshift_domain }}","is_superuser": false,"is_system_auditor": true,"password": "{{ password }}"}'
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createuserstower
       - reconfigtower

- name: Creating OpenShift Enterprise 3 Project within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/projects/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "OpenShift Enterprise 3 Project","description": "Project for Automating OpenShift Enterprise 3","local_path": "","scm_type": "git","scm_url": "https://github.com/latam-tech-office/2016-forum","scm_branch": "","scm_clean": true,"scm_delete_on_update": true,"credential": null,"organization": 1,"scm_update_on_launch": true,"scm_update_cache_timeout": 0}'
    status_code: 201
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createprojectstower
       - reconfigtower
       
- name: Creating Testing OCP Project within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/projects/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "Testing OCP","description": "Testing OCP via Ansible Tower","local_path": "","scm_type": "git","scm_url": "https://github.com/rcalvaga/ansible-rh-forum-latam","scm_branch": "","scm_clean": true,"scm_delete_on_update": true,"credential": null,"organization": 1,"scm_update_on_launch": true,"scm_update_cache_timeout": 0}'
    status_code: 201
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createprojectstower
       - reconfigtower

- name: Creating LATAM Red Hat Forum Team within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/teams/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "LATAM Red Hat Forum Team","description": "LATAM Red Hat Forum Team","organization": 1}'
    status_code: 201
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createteamstower
       - reconfigtower

- name: Creating OpenShift Credentials within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/credentials/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "OpenShift Credentials","description": "OpenShift Credentials","kind": "ssh","host": "","username": "{{ openshift_master_username }}","password": "{{ openshift_master_password }}","security_token": "","project": "37","domain": "","ssh_key_data": "","ssh_key_unlock": "","organization": 1,"become_method": "","become_ansibletower_username": "","become_password": "","vault_password": "","subscription": "","tenant": "","secret": "","client": "","authorize": false,"authorize_password": "","user": null,"team": 1}'
    status_code: 201
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createcredentialstower
       - reconfigtower

- name: Creating OpenShift Inventory within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/inventories/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "OpenShift Inventory","description": "OpenShift Inventory","organization": 1,"variables": "---"}'
    status_code: 201
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createinventoriestower
       - reconfigtower

- name: Creating master-group within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/groups/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "master-group","description": "Master group of OpenShift","inventory": 34,"variables": ""}'
    status_code: 201
  ignore_errors: True
  tags:
       - tower
       - configtower
       - creategroupstower
       - reconfigtower

- name: Creating nodes-group within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/groups/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "nodes-group","description": "Nodes group of OpenShift","inventory": 34,"variables": ""}'
    status_code: 201
  ignore_errors: True
  tags:
       - tower
       - configtower
       - creategroupstower
       - reconfigtower

- name: Creating OSE Master "{{ openshift_master_hostname }}" Host within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/hosts/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "{{ openshift_master_hostname }}","description": "Master Server of OpenShift","inventory": 34,"enabled": true,"instance_id": "","variables": ""}'
    status_code: 201
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createhoststower
       - reconfigtower

- name: Creating "Create a Project In OpenShift 3" Job Template within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/job_templates/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "Create a Project In OpenShift 3","description": "Create a Project In OpenShift 3 Enterprise","job_type": "run","inventory": 34,"project": 38,"playbook": "openshift-ansible/openshift-create-project-as-admin.yml","credential": 34,"cloud_credential": null,"network_credential": null,"forks": 0,"limit": "{{ openshift_master_hostname }}","verbosity": 1,"extra_vars": "---\nproject_name:","job_tags": "","force_handlers": false,"skip_tags": "","start_at_task": "","host_config_key": "","ask_variables_on_launch": true,"ask_limit_on_launch": false,"ask_tags_on_launch": false,"ask_job_type_on_launch": false,"ask_inventory_on_launch": false,"ask_credential_on_launch": false,"survey_enabled": false,"become_enabled": false,"allow_simultaneous": false}'
    status_code: 201
  register: result
  until: result.status == 201
  retries: 10
  delay: 10
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createjobtemplatestower
       - reconfigtower

- name: Creating "Create RHT Forum LATAM 2017 Apps in OpenShift 3" Job Template within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/job_templates/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "Create RHT Forum LATAM 2017 Apps in OpenShift 3","description": "Create RHT Forum LATAM 2017 Apps in OpenShift 3","job_type": "run","inventory": 34,"project": 37,"playbook": "cfme-tower-create-forum-2016-applications.yml","credential": 34,"cloud_credential": null,"network_credential": null,"forks": 0,"limit": "{{ openshift_master_hostname }}","verbosity": 1,"extra_vars": "---\ntooling_namespace: {{ tooling_namespace }}\nmicroservices_namespace: {{ microservices_namespace }}\nusername: {{ username }}","job_tags": "","force_handlers": false,"skip_tags": "","start_at_task": "","host_config_key": "","ask_variables_on_launch": true,"ask_limit_on_launch": false,"ask_tags_on_launch": false,"ask_job_type_on_launch": false,"ask_inventory_on_launch": false,"ask_credential_on_launch": false,"survey_enabled": false,"become_enabled": false,"allow_simultaneous": false}'
    status_code: 201
  register: result
  until: result.status == 201
  retries: 10
  delay: 10
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createjobtemplatestower
       - reconfigtower

- name: Creating "Delete a Project In OpenShift 3" Job Template within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/job_templates/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "Delete a Project In OpenShift 3","description": "Delete a Project In OpenShift 3 Enterprise","job_type": "run","inventory": 34,"project": 38,"playbook": "openshift-ansible/openshift-delete-project-as-admin.yml","credential": 34,"cloud_credential": null,"network_credential": null,"forks": 0,"limit": "{{ openshift_master_hostname }}","verbosity": 1,"extra_vars": "---\nproject_name:","job_tags": "","force_handlers": false,"skip_tags": "","start_at_task": "","host_config_key": "","ask_variables_on_launch": true,"ask_limit_on_launch": false,"ask_tags_on_launch": false,"ask_job_type_on_launch": false,"ask_inventory_on_launch": false,"ask_credential_on_launch": false,"survey_enabled": false,"become_enabled": false,"allow_simultaneous": false}'
    status_code: 201
  register: result
  until: result.status == 201
  retries: 10
  delay: 10
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createjobtemplatestower
       - reconfigtower

- name: Creating "Delete RHT Forum LATAM 2017 Apps in OpenShift 3" Job Template within Ansible Tower
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ ansible_tower_url }}/api/v1/job_templates/"
    user: "{{ ansibletower_username }}"
    password: "{{ ansibletower_password }}"
    force_basic_auth: yes
    body: '{"name": "Delete RHT Forum LATAM 2017 Apps in OpenShift 3","description": "Delete RHT Forum LATAM 2017 Apps in OpenShift 3","job_type": "run","inventory": 34,"project": 37,"playbook": "cfme-tower-delete-forum-2016-applications.yml","credential": 34,"cloud_credential": null,"network_credential": null,"forks": 0,"limit": "{{ openshift_master_hostname }}","verbosity": 1,"extra_vars": "---\nmicroservices_namespace: {{ microservices_namespace }}","job_tags": "","force_handlers": false,"skip_tags": "","start_at_task": "","host_config_key": "","ask_variables_on_launch": true,"ask_limit_on_launch": false,"ask_tags_on_launch": false,"ask_job_type_on_launch": false,"ask_inventory_on_launch": false,"ask_credential_on_launch": false,"survey_enabled": false,"become_enabled": false,"allow_simultaneous": false}'
    status_code: 201
  register: result
  until: result.status == 201
  retries: 10
  delay: 10
  ignore_errors: True
  tags:
       - tower
       - configtower
       - createjobtemplatestower
       - reconfigtower
  
- name: Create the ansible-tower-content.service unit file
  template: src=templates/ansible-tower-content.service.j2 dest=/etc/systemd/system/ansible-tower-content.service mode=644
  tags:
       - tower
       - configtower

- name: reload systemctl
  command: systemctl daemon-reload
  tags:
       - tower
       - configtower

- name: Start ansible-tower-content.service
  service: name=ansible-tower-content.service state=started enabled=yes
  tags:
       - tower
       - configtower

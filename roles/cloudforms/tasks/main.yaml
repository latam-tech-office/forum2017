- name: Delete any previously existing namespaces 
  command: oc delete project {{ cloudforms_namespace }}
  ignore_errors: True
  tags: 
     - create
     - cleanup
     - cloudforms

- name: Create a Project{{ ':' }} {{ cloudforms_namespace }} 
  command: oadm new-project {{ cloudforms_namespace }} --display-name="CloudForms{{ ':' }} LATAM Red Hat Forum 2017" --admin={{ username }}
  register: create_namespace
  until: create_namespace.rc == 0
  retries: 60
  delay: 10
  tags: 
     - create
     - cleanup
     - cloudforms

#- name: Force this project to run on silo=cloudforms Node selector
#  command: oc patch namespace/{{ cloudforms_namespace }} --patch '{"metadata"{{ ':' }}{"annotations"{{ ':' }}{"openshift.io/node-selector"{{ ':' }}"silo=cloudforms" }}}'

- name: Allow this pod to run in a Privileged Security Context
  command: oadm policy add-scc-to-user privileged system:serviceaccount:{{ cloudforms_namespace }}:default
  tags: 
     - create
     - cleanup
     - cloudforms

- name: Create the application based on a template
  command: oc new-app --file=templates/cfme-template.yaml --param=NAME=cloudforms --namespace {{ cloudforms_namespace }}
  tags: 
     - create
     - cleanup
     - cloudforms

#- name: Remove the persistence volume from postgresql. It will be add that later.
#  command: oc volume deploymentconfig/postgresql --name=cfme-pgdb-volume --remove --namespace {{ cloudforms_namespace }}
#  tags: 
#     - create
#     - remove_persistence
#     - cloudforms                 

#- name: Remove the persistence volume from cloudforms. It will be add that later.
#  command: oc volume deploymentconfig/cloudforms --name=cfme-app-volume --remove --namespace {{ cloudforms_namespace }}
#  tags:
#     - create
#     - remove_persistence
#     - cloudforms                 

- name: Remove current router
  command: oc delete route/cloudforms --namespace {{ cloudforms_namespace }}
  tags:
     - create
     - recreate_router
     - cloudforms                 

- name: Create a friendly route cloudforms.{{ openshift_cloudapps_domain }}
  command: oc expose service/cloudforms --hostname=cloudforms.{{ openshift_cloudapps_domain }} --port={{ cloudforms_http_type }} --namespace {{ cloudforms_namespace }}
  tags:
     - create
     - recreate_router
     - cloudforms                 

- name: Specify a Router Termination due SSL{{ ':' }} Passthrough
  command: oc patch route/cloudforms --patch='{"spec"{{ ':' }}{"tls"{{ ':' }}{"termination"{{ ':' }} "passthrough"}}}' --namespace {{ cloudforms_namespace }}
  tags:
     - create
     - recreate_router 
     - cloudforms                 

- name: Fetch CloudForms Port
  command: oc get service/cloudforms --output jsonpath='{..spec.ports[?(@.name=="{{ cloudforms_http_type }}")].port}' --namespace {{ cloudforms_namespace }}
  register: cloudforms_port
  tags: 
     - configcloudforms
     - cloudforms                 
     - cloudforms_tower

- name: Fetch CloudForms Address
  command: oc get service/cloudforms --output jsonpath='{..spec.clusterIP}' --namespace {{ cloudforms_namespace }}
  register: cloudforms_ip
  tags: 
     - configcloudforms
     - cloudforms                 

- name: Define CloudForms URL
  set_fact: cloudforms_url='cloudforms.{{ cloudforms_namespace }}.svc.cluster.local:{{ cloudforms_port.stdout }}'
  tags: 
     - configcloudforms
     - cloudforms
     - cloudforms_tower
                  
- name: Define CloudForms FULL URL
  set_fact: cloudforms_full_url='{{ cloudforms_http_type }}{{ ':' }}//{{ cloudforms_url }}'
  tags:
     - configcloudforms
     - cloudforms
     - cloudforms_tower
                  
- name: Wait for CloudForms to be up{{ ':' }} {{ cloudforms_full_url }}
  uri: url='{{ cloudforms_full_url }}' validate_certs=no status_code=200 
  register: cloudforms_wait
  until: cloudforms_wait.status == 200
  retries: 200
  delay: 10
  tags: 
     - configcloudforms
     - cloudforms             

- name: Wait for CloudForms to settle down a while
  pause: seconds=60
  tags:
     - configcloudforms
     - cloudforms

- name: Fetch a Token from Management Infrastructure
  command: oc serviceaccounts get-token management-admin --namespace management-infra
  register: management_infra_token
  tags: 
     - configcloudforms
     - cloudforms                 
    
- name: Adding {{ username }} user to CloudForms
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ cloudforms_full_url }}/api/users/"
    user: "{{ cloudforms_username }}"
    password: "{{ cloudforms_password }}"
    force_basic_auth: yes
    status_code: 200
    body: '{"name": "Demo Admin","userid": "{{ username }}","password": "{{ password }}","email": "{{ username }}@{{ openshift_domain }}","group": {"id": 1000000000002}}'
  tags:
       - cloudforms
       - configcloudforms
       - createuserscloudforms 

- name: Adding forumadmin user to CloudForms
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ cloudforms_full_url }}/api/users/"
    user: "{{ cloudforms_username }}"
    password: "{{ cloudforms_password }}"
    force_basic_auth: yes
    status_code: 200
    body: '{"name": "Forum Admin","userid": "forumadmin","password": "{{ password }}","email": "forumadmin@{{ openshift_domain }}","group": {"id": 1000000000002}}'
  tags:
       - cloudforms
       - configcloudforms
       - createuserscloudforms 
       
- name: Adding Red Hat Forum LATAM 2017 Tenant to CloudForms
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ cloudforms_full_url }}/api/tenants/"
    user: "{{ cloudforms_username }}"
    password: "{{ cloudforms_password }}"
    force_basic_auth: yes
    status_code: 200
    body: '{"name": "RHT Forum Tenant","description": "Red Hat Forum LATAM 2017 Tenant","parent": {"href": "{{ cloudforms_full_url }}/api/tenants/1000000000001"}}'
  tags:
       - cloudforms
       - configcloudforms
       - createtenantscloudforms   
       
- name: Adding OpenShift Container Platform Provider to CloudForms
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ cloudforms_full_url }}/api/providers/"
    user: "{{ cloudforms_username }}"
    password: "{{ cloudforms_password }}"
    force_basic_auth: yes
    status_code: 200
    body: '{"type":"ManageIQ::Providers::OpenshiftEnterprise::ContainerManager","tenant_id":1000000000002,"name":"OpenShift Container Platform","connection_configurations" : [{"endpoint": {"role": "default","hostname":"openshift.default.svc.cluster.local","port":"443"},"authentication": {"role": "bearer","auth_key": "{{ management_infra_token.stdout }}"}},{"endpoint": {"role": "hawkular","hostname":"hawkular-metrics.openshift-infra.svc.cluster.local","port": "443"},"authentication": {"role": "hawkular","auth_key": "{{ management_infra_token.stdout }}"}}]}'
  tags:
       - cloudforms
       - configcloudforms
       - createproviderscloudforms 
       
#- name: Adding Ansible Tower Provider to CloudForms
#  uri:
#    method: POST
#    body_format: json
#    HEADER_Content-Type: application/json
#    validate_certs: no
#    return_content: yes
#    url: "{{ cloudforms_full_url }}/api/providers?provider_class=provider"
#    user: "{{ cloudforms_username }}"
#    password: "{{ cloudforms_password }}"
#    force_basic_auth: yes
#    status_code: 200
#    body: '{"type":"ManageIQ::Providers::AnsibleTower::Provider","name":"Ansible Tower 3","url":"http://towerweb.ansible-tower.svc.cluster.local/api/v1","credentials": {"userid":"admin","password":"password"}}'
#  tags:
#       - cloudforms
#       - configcloudforms
#       - createproviderscloudforms

- name: Adding Service Catalog to CloudForms
  uri:
    method: POST
    body_format: json
    HEADER_Content-Type: application/json
    validate_certs: no
    return_content: yes
    url: "{{ cloudforms_full_url }}/api/service_catalogs"
    user: "{{ cloudforms_username }}"
    password: "{{ cloudforms_password }}"
    force_basic_auth: yes
    status_code: 200
    body: '{"action": "create","resource": {"name": "OpenShift Catalog","description": "OpenShift Service Catalog"}}'
  tags:
       - cloudforms
       - configcloudforms
       - createcatalogscloudforms
